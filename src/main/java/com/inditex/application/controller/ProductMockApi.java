/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.inditex.application.controller;

import java.util.Set;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import com.inditex.application.domain.ProductMockApiDelegate;
import com.inditex.domain.model.product.ProductDetail;

import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-27T18:29:06.333941+02:00[Europe/Madrid]")
@Validated
@Tag(name = "product", description = "the product API")
public interface ProductMockApi {

    default ProductMockApiDelegate getDelegate() {
        return new ProductMockApiDelegate() {};
    }

    /**
     * GET /product/{productId}/similar : Similar products
     *
     * @param productId  (required)
     * @return OK (status code 200)
     *         or Product Not found (status code 404)
     */
    @Operation(
        operationId = "getProductSimilar",
        summary = "Similar products",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Product Not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/{productId}/similar",
        produces = { "application/json" }
    )
    default ResponseEntity<Set<String>> getProductSimilar(
        @Parameter(name = "productId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("productId") String productId
    ) {
        return getDelegate().getProductSimilar(productId);
    }
    
    @Operation(
    	operationId = "getProductDetail",
    	summary = "Product Detail",
    	responses = {
    		@ApiResponse(responseCode = "200", description = "OK", content = {
    				@Content(mediaType = "application/json", schema = @Schema(implementation = ProductDetail.class))
    		}),
    		@ApiResponse(responseCode = "404", description = "Product Not found")
    	}
    )
    @RequestMapping(
    		method = RequestMethod.GET,
    		value = "/product/{productId}",
    		produces = {"application/json"}
    )
    default ResponseEntity<ProductDetail> getProductDetail(
            @Parameter(name = "productId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("productId") String productId
    		){
    	return getDelegate().getProductDetail(productId);
    }
    

}
